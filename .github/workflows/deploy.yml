name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Build Docker image
        run: |
          docker build -t jeomaechoo_server .
          docker tag jeomaechoo_server:latest ${{ secrets.AWS_EC2_HOST }}:8080/jeomaechoo_server:latest

      - name: Push Docker image to EC2 registry
        run: |
          docker save jeomaechoo_server | bzip2 | ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} 'bunzip2 | docker load'

      - name: Remove existing env file if it exists
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} 'rm -f /home/ubuntu/.env'

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            docker stop chopsticks-external-marketplace || true
            docker rm chopsticks-external-marketplace || true
            docker run -d -p 4000:4000 --name chopsticks-external-marketplace --restart always -v $(pwd)/.env:/app/.env chopsticks-external-marketplace:latest
          EOF

      - name: Create env file on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            touch /home/ubuntu/.env
            echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> /home/ubuntu/.env
            echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> /home/ubuntu/.env
            echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> /home/ubuntu/.env
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> /home/ubuntu/.env
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> /home/ubuntu/.env
            echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> /home/ubuntu/.env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /home/ubuntu/.env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /home/ubuntu/.env
            echo "ORIGIN=${{ secrets.ORIGIN }}" >> /home/ubuntu/.env
            cat /home/ubuntu/.env
          EOF

      - name: Cleanup old Docker images
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            docker system prune -f
          EOF

      - name: Docker run
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            docker stop jeomaechoo_server || true
            docker rm jeomaechoo_server || true
            docker rmi jeomaechoo_server:latest || true
            docker run -d -p 8080:8080 --name jeomaechoo_server --restart always -v /home/ubuntu/.env:/app/.env jeomaechoo_server:latest
          EOF

      - name: Cleanup old Docker images
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            docker system prune -f
          EOF
